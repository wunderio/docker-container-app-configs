# HTTP Forwarder for all sites
server {
    listen 80;
    server_name ^((?<matchedhost>[a-z0-9-]+\.)+[a-z-]+)$;

    return 301 https://$host$request_uri;
}

# SSL Terminator
server {
  listen 443 ssl http2;
  server_name ^((?<matchedhost>[a-z0-9-]+\.)+[a-z-]+)$;

  ssl on;
  ssl_certificate /etc/nginx/ssl/ssl.pem;
  ssl_certificate_key /etc/nginx/ssl/ssl.key;

  ssl_dhparam /etc/nginx/ssl/dh2048.pem;

  location / {

    # Pass the request to backend
    proxy_pass http://backend;

    # We expect the downsteam servers to redirect to the
    # right hostname, so don't do any rewrites here.
    proxy_redirect             off;

    proxy_connect_timeout  180s;
    proxy_send_timeout  180s;
    proxy_read_timeout  180s;

    # Let's increase the buffer size
    proxy_buffer_size   512k;
    proxy_buffers   16 512k;
    proxy_busy_buffers_size   512k;

    # Pass a bunch of headers to the downstream server
    # so they'll know what's going on.
    proxy_set_header           Host             $host;
    proxy_set_header           X-Real-IP        $remote_addr;
    proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;

    # Most web apps can be configured to read this header and
    # understand that the current session is actually HTTPS.
    proxy_set_header        X-Forwarded-Proto $scheme;
    add_header              Front-End-Https   on;
  }

}